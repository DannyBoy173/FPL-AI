"""
testing the understat scraping
"""
import asyncio
import json
import aiohttp
from pytest import fixture
from understat import Understat

DataSet = [['2016', 'Adrián', ['2016-08-15', '19:00:00'], 'Chelsea'],
['2016', 'Adrián', ['2016-08-15', '19:00:00'], 'Chelsea'],
['2016', 'Adrián', ['2016-08-15', '19:00:00'], 'Chelsea'],
['2016', 'Adrián', ['2016-08-15', '19:00:00'], 'Chelsea'],
['2016', 'Adrián', ['2016-08-15', '19:00:00'], 'Chelsea']]

async def getID(understat, season, name):
    """get the understat ID of the player"""
    data = await understat.get_league_players("epl", season, player_name = name)
    ID = data[0]["id"] 
    return ID

async def getXGI(understat, ID, season, date):
    """get the expected goals and expected assists of the player"""
    data = await understat.get_player_matches(ID, {"season": str(season), "date": date})
    xG = data[0]["xG"]
    xA = data[0]["xA"]
    return xG, xA

async def getXGC(understat, fixture, season, date):
    """get the expected goals conceded"""
    data = await understat.get_team_results(fixture, season)
    for game in data:
        USdate = game["datetime"]
        if date in USdate:
            data = game

    home = data["h"]["title"]
    if (home == fixture):
        xGC = data["xG"]["h"]
    else:
        xGC = data["xG"]["a"]
    return xGC

async def main(data):
    """attempt to get the understat data of the player"""
    async with aiohttp.ClientSession() as session:
        understat = Understat(session)
        date = data[2][0]
    
        try:
            ID = await asyncio.gather(getID(understat, data[0], data[1]))
            understatData = await asyncio.gather(getXGI(understat, ID[0], data[0], date), getXGC(understat, data[3], data[0], date))
            xG = understatData[0][0]
            xA = understatData[0][1]
            xGC = understatData[1]
        except:
            ID = 'FAIL'
            xG = 'FAIL'
            xA = 'FAIL'
            xGC = 'FAIL'
        
        data.extend([xG, xA, xGC, ID])
        return data

# limit the number of simultaneous API calls to 100
sem = asyncio.Semaphore(100)
async def safe_main(row):
    async with sem:  # semaphore limits num of simultaneous API calls
        return await asyncio.gather(main(row))

async def getUSdata():
    tasks = []
    for row in DataSet:
        tasks.append(asyncio.ensure_future(safe_main(row)))

    updatedData = await asyncio.gather(*tasks)
    return updatedData
            
loop = asyncio.get_event_loop()
updatedData = loop.run_until_complete(getUSdata())
print(updatedData)

"""
example of how to use it
# get understat ID of a player name
        # returns an empty list if the name is not found
        data = await understat.get_league_players("epl", 2018, player_name="Paul Pogba")
        print (json.dumps(data))
        print("ID:", data[0]["id"])

        # get xG and xA for a player in a given match
        data = await understat.get_player_matches(1740, {"season": "2018", "date": "2018-09-15"})
        print (json.dumps(data))
        print("xG:", data[0]["xG"])
        print("xA:", data[0]["xA"])

        # get xGC for a team in a given match
        data = await understat.get_team_results("Manchester United", 2018, datetime = "2018-08-10 22:00:00")
        print (json.dumps(data))
        home = data[0]["h"]["title"]

        if (home == "Manchester United"):
            print("xGC:", data[0]["xG"]["a"])
        else:
            print("xGC:", data[0]["xG"]["h"])
"""